# -*- coding: utf-8 -*-
"""
Google Colab 全自动视频翻译系统 v4.2 (完整可运行版)
功能：支持语音变速同步 | 自动错误重试 | 智能资源清理
"""
# ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 完整代码 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

# 环境准备
from google.colab import drive, files
import ipywidgets as widgets
from IPython.display import display, clear_output
import os
import time
import subprocess
from pydub import AudioSegment
import edge_tts
import whisper
from moviepy.editor import VideoFileClip, AudioFileClip

# 配置参数
CONFIG = {
    "MAX_RETRIES": 3,          # 失败重试次数
    "VOICE": "en-US-AriaNeural",# 发音人选项：en-US-ChristopherNeural, en-GB-LibbyNeural
    "CLEANUP": True,           # 自动清理临时文件
    "SUBTITLE_SYNC": 0.97      # 字幕提前系数(解决唇音不同步)
}

# UI组件初始化
progress = widgets.FloatProgress(min=0, max=8, description='进度:')
status = widgets.HTML(value="<b>🟢 系统就绪</b>")
upload_btn = widgets.Button(description="📤 上传视频", button_style='success')
run_btn = widgets.Button(description="🚀 开始处理", button_style='primary', disabled=True)
download_btn = widgets.Button(description="⬇️ 下载结果", disabled=True)
video_name = None

# 界面布局
box = widgets.VBox([
    widgets.HTML("<h1>视频翻译自动化系统 v4.2</h1>"),
    upload_btn,
    widgets.HTML("<hr>"),
    run_btn,
    progress,
    status,
    download_btn
])

# ================= 核心逻辑 =================
def process_audio_segment(text, idx, target_duration):
    """带重试机制的语音生成"""
    for attempt in range(CONFIG["MAX_RETRIES"]):
        try:
            # 生成TTS语音
            communicate = edge_tts.Communicate(text, CONFIG["VOICE"])
            communicate.save(f"/content/work/tts_{idx}.mp3")
            
            # 加载并调整时长
            seg = AudioSegment.from_mp3(f"/content/work/tts_{idx}.mp3")
            current_dur = seg.duration_seconds
            
            # 动态变速算法
            if current_dur != target_duration:
                speed_factor = current_dur / target_duration
                seg = seg.speedup(playback_speed=speed_factor)
            
            # 精确裁剪
            return seg[:int(target_duration*1000)]
        except Exception as e:
            if attempt == CONFIG["MAX_RETRIES"]-1:
                raise RuntimeError(f"语音生成失败: {str(e)}")
            time.sleep(2)

def generate_dubbed_audio(result):
    """生成同步配音"""
    final_audio = AudioSegment.silent(0)
    for idx, seg in enumerate(result['segments']):
        # 校准时间戳
        start = seg['start'] * CONFIG["SUBTITLE_SYNC"]
        end = seg['end'] * CONFIG["SUBTITLE_SYNC"]
        target_dur = end - start
        
        # 处理音频片段
        audio_segment = process_audio_segment(seg['text'], idx, target_dur)
        
        # 补静音
        silence_needed = max(0, int(target_dur*1000) - len(audio_segment))
        final_seg = audio_segment + AudioSegment.silent(silence_needed)
        final_audio += final_seg
        
        # 更新进度
        progress.value += 1/len(result['segments'])
        status.value = f"生成配音: {idx+1}/{len(result['segments'])}片段"
    
    final_audio.export("/content/work/dubbed_audio.mp3", format="mp3")

def process_video():
    try:
        # ===== 阶段1: 环境准备 =====
        progress.value = 0
        status.value = "🔧 安装依赖..."
        !pip install -q openai-whisper==20231117 ffmpeg-python==0.2.0 > /dev/null
        
        # ===== 阶段2: 音频提取 =====
        progress.value +=1
        status.value = "🎵 提取音频..."
        !mkdir -p /content/work
        if os.system(f'ffmpeg -i "{video_name}" -vn -ar 16000 -ac 1 -acodec pcm_s16le -y "/content/work/audio.wav"') != 0:
            raise RuntimeError("音频提取失败，请检查视频格式")
        
        # ===== 阶段3: 字幕生成 =====
        progress.value +=1
        status.value = "📝 分析视频..."
        model = whisper.load_model("medium" if "16GB" in os.popen("nvidia-smi").read() else "small")
        
        # 带时间戳校准的转录
        result = model.transcribe(
            "/content/work/audio.wav",
            task="translate",
            language="zh",
            word_timestamps=True,
            condition_on_previous_text=False  # 防止长视频内存溢出
        )
        
        # 保存字幕
        with open("/content/work/subtitles.srt", "w") as f:
            f.write(result["srt"])
        
        # ===== 阶段4: 生成配音 =====
        progress.value +=1
        generate_dubbed_audio(result)
        
        # ===== 阶段5: 视频合成 =====
        progress.value +=1
        status.value = "🎬 合成最终视频..."
        video = VideoFileClip(video_name).without_audio()
        audio = AudioFileClip("/content/work/dubbed_audio.mp3")
        
        # 同步时长
        final_duration = min(video.duration, audio.duration)
        final_video = video.subclip(0, final_duration).set_audio(audio.subclip(0, final_duration))
        
        # 高效渲染
        final_video.write_videofile(
            "/content/work/final_output.mp4",
            codec="libx264",
            audio_codec="aac",
            threads=4,
            preset="fast",
            logger=None  # 禁用冗长日志
        )
        
        # ===== 阶段6: 打包结果 =====
        progress.value +=1
        status.value = "📦 准备下载..."
        !zip -j /content/results.zip /content/work/final_output.mp4 /content/work/subtitles.srt
        
        # 清理资源
        if CONFIG["CLEANUP"]:
            !rm -rf /content/work/tts_*.mp3 /content/work/audio.wav
            
        download_btn.disabled = False
        status.value = "<b style='color:green'>✅ 处理完成！</b>"
        
    except Exception as e:
        status.value = f"<b style='color:red'>❌ 错误: {str(e)}</b>"
        run_btn.disabled = False

# ================= 事件绑定 =================
def on_upload_click(b):
    global video_name
    clear_output()
    display(box)
    uploaded = files.upload()
    if uploaded:
        video_name = list(uploaded.keys())[0]
        status.value = f"<b>📼 已上传：{video_name}</b>"
        run_btn.disabled = False

def on_run_click(b):
    run_btn.disabled = True
    download_btn.disabled = True
    progress.value = 0
    process_video()

def on_download_click(b):
    files.download("/content/results.zip")

upload_btn.on_click(on_upload_click)
run_btn.on_click(on_run_click)
download_btn.on_click(on_download_click)

# 启动界面
display(box)
